{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM9xLNl8zOtaSDLmCQC++qd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jeffersonramelo/Peper-relato-integrado-DIF-DIF/blob/main/modelo%20diff%20diff\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pAOcNiJxZUuX",
        "outputId": "973bbad0-aa99-4bfd-e4b5-775f15a48b75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  codigo    Nome Setor Econômico\\nBovespa  \\\n",
            "0   AALR  Alliar                    Saúde   \n",
            "1   AALR  Alliar                    Saúde   \n",
            "2   AALR  Alliar                    Saúde   \n",
            "3   AALR  Alliar                    Saúde   \n",
            "4   AALR  Alliar                    Saúde   \n",
            "\n",
            "                                    Subsetor Bovespa Setor\\nEconomatica  \\\n",
            "0  Serviços médico-hospitalares análises e diagnó...             Outros   \n",
            "1  Serviços médico-hospitalares análises e diagnó...             Outros   \n",
            "2  Serviços médico-hospitalares análises e diagnó...             Outros   \n",
            "3  Serviços médico-hospitalares análises e diagnó...             Outros   \n",
            "4  Serviços médico-hospitalares análises e diagnó...             Outros   \n",
            "\n",
            "   Valor Mercado30Abr11  Valor Mercado30Mai11  Valor Mercado30Jun11  \\\n",
            "0          2.695529e+06          2.693169e+06          2.810304e+06   \n",
            "1          2.284491e+06          2.358640e+06          2.298233e+06   \n",
            "2          1.045598e+06          1.351944e+06          1.390977e+06   \n",
            "3          1.240830e+06          1.206527e+06          1.217182e+06   \n",
            "4          1.772228e+06          1.671735e+06          1.705725e+06   \n",
            "\n",
            "   PU30Abr11  PU30Mai11  ...  Nome_Companhia  modelo1  tra1  tem1  modelo2  \\\n",
            "0  22.850000  22.830000  ...             NaN      1.0     0   1.0      1.0   \n",
            "1  19.410000  20.040000  ...             NaN      1.0     0   0.0      1.0   \n",
            "2   8.840000  11.430000  ...             NaN      NaN     0   NaN      1.0   \n",
            "3  10.490000  10.200000  ...             NaN      NaN     0   NaN      1.0   \n",
            "4  14.867034  14.024007  ...             NaN      NaN     0   NaN      NaN   \n",
            "\n",
            "   tra2  tem2  modelo3  tra3  tem3  \n",
            "0   0.0   1.0        1   0.0     1  \n",
            "1   0.0   1.0        1   0.0     1  \n",
            "2   0.0   0.0        1   0.0     1  \n",
            "3   0.0   0.0        1   0.0     0  \n",
            "4   NaN   NaN        1   0.0     0  \n",
            "\n",
            "[5 rows x 62 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Ler o arquivo Excel\n",
        "df = pd.read_excel('/content/tabelaunida_difdif22a17.xlsx')\n",
        "\n",
        "# Mostrar as primeiras linhas do DataFrame para verificar a leitura\n",
        "print(df.head())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1]\n",
        "\n",
        "# Definindo a fórmula do modelo Diff-in-Diff\n",
        "# A interação entre 'trat1' e 'tem1' captura o efeito do tratamento\n",
        "formula = 'Q(\"Valor Mercado30Abr11\") ~ tra3 + tem3 + tra3:tem3 + Q(\"Patrim Liq Dez 2010\") + Q(\"Lucro Liquido Dez 2010\") + Q(\"Intang Dez 2010\") + Q(\"CaixaEEqCx Dez 2010\") + Q(\"Receita Dez 2010\") + Q(\"CxGerOp Dez 2010\") + Q(\"OuReAb Dez 2010\")'\n",
        "\n",
        "# Estimando o modelo usando OLS\n",
        "modelo_diff_in_diff = smf.ols(formula=formula, data=df_filtrado).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão\n",
        "print(modelo_diff_in_diff.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lF32gUxxlzil",
        "outputId": "b9147ad4-3a26-4205-8659-59a2885882af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                OLS Regression Results                               \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Abr11\")   R-squared:                       0.707\n",
            "Model:                                   OLS   Adj. R-squared:                  0.704\n",
            "Method:                        Least Squares   F-statistic:                     238.8\n",
            "Date:                       Tue, 06 Feb 2024   Prob (F-statistic):          1.52e-255\n",
            "Time:                               10:59:15   Log-Likelihood:                -17807.\n",
            "No. Observations:                        999   AIC:                         3.564e+04\n",
            "Df Residuals:                            988   BIC:                         3.569e+04\n",
            "Df Model:                                 10                                         \n",
            "Covariance Type:                   nonrobust                                         \n",
            "===============================================================================================\n",
            "                                  coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------\n",
            "Intercept                    6.748e+05   6.54e+05      1.032      0.302   -6.08e+05    1.96e+06\n",
            "tra3                         1.892e+07   4.81e+06      3.935      0.000    9.49e+06    2.84e+07\n",
            "tem3                        -2.074e+06   8.69e+05     -2.388      0.017   -3.78e+06    -3.7e+05\n",
            "tra3:tem3                    1.421e+07   5.94e+06      2.391      0.017    2.55e+06    2.59e+07\n",
            "Q(\"Patrim Liq Dez 2010\")        1.5669      0.079     19.928      0.000       1.413       1.721\n",
            "Q(\"Lucro Liquido Dez 2010\")    -0.9388      0.271     -3.467      0.001      -1.470      -0.407\n",
            "Q(\"Intang Dez 2010\")           -0.4009      0.115     -3.485      0.001      -0.627      -0.175\n",
            "Q(\"CaixaEEqCx Dez 2010\")        2.8565      0.344      8.295      0.000       2.181       3.532\n",
            "Q(\"Receita Dez 2010\")          -0.3981      0.029    -13.659      0.000      -0.455      -0.341\n",
            "Q(\"CxGerOp Dez 2010\")           3.2722      0.254     12.905      0.000       2.775       3.770\n",
            "Q(\"OuReAb Dez 2010\")            8.3668      0.672     12.454      0.000       7.048       9.685\n",
            "==============================================================================\n",
            "Omnibus:                     1217.606   Durbin-Watson:                   0.877\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           380051.779\n",
            "Skew:                           5.760   Prob(JB):                         0.00\n",
            "Kurtosis:                      97.856   Cond. No.                     4.74e+08\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.74e+08. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1]\n",
        "\n",
        "# Definindo a fórmula do modelo Diff-in-Diff\n",
        "# A interação entre 'trat1' e 'tem1' captura o efeito do tratamento\n",
        "formula = 'Q(\"Valor Mercado30Mai11\") ~ tra3 + tem3 + tra3:tem3 + Q(\"Patrim Liq Dez 2010\") + Q(\"Lucro Liquido Dez 2010\") + Q(\"Intang Dez 2010\") + Q(\"CaixaEEqCx Dez 2010\") + Q(\"Receita Dez 2010\") + Q(\"CxGerOp Dez 2010\") + Q(\"OuReAb Dez 2010\")'\n",
        "\n",
        "# Estimando o modelo usando OLS\n",
        "modelo_diff_in_diff = smf.ols(formula=formula, data=df_filtrado).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão\n",
        "print(modelo_diff_in_diff.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SWBbqXJFl95m",
        "outputId": "ec27c8f1-8b33-43cd-d1be-f7621d6d54eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                OLS Regression Results                               \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Mai11\")   R-squared:                       0.736\n",
            "Model:                                   OLS   Adj. R-squared:                  0.733\n",
            "Method:                        Least Squares   F-statistic:                     273.6\n",
            "Date:                       Tue, 06 Feb 2024   Prob (F-statistic):          6.46e-276\n",
            "Time:                               10:59:35   Log-Likelihood:                -17653.\n",
            "No. Observations:                        994   AIC:                         3.533e+04\n",
            "Df Residuals:                            983   BIC:                         3.538e+04\n",
            "Df Model:                                 10                                         \n",
            "Covariance Type:                   nonrobust                                         \n",
            "===============================================================================================\n",
            "                                  coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------\n",
            "Intercept                    4.864e+05   6.13e+05      0.793      0.428   -7.17e+05    1.69e+06\n",
            "tra3                         1.924e+07   4.51e+06      4.270      0.000    1.04e+07    2.81e+07\n",
            "tem3                        -1.645e+06   8.16e+05     -2.016      0.044   -3.25e+06   -4.37e+04\n",
            "tra3:tem3                    1.152e+07   5.57e+06      2.069      0.039    5.94e+05    2.25e+07\n",
            "Q(\"Patrim Liq Dez 2010\")        1.5793      0.074     21.411      0.000       1.435       1.724\n",
            "Q(\"Lucro Liquido Dez 2010\")    -0.8047      0.254     -3.171      0.002      -1.303      -0.307\n",
            "Q(\"Intang Dez 2010\")           -0.3618      0.108     -3.356      0.001      -0.573      -0.150\n",
            "Q(\"CaixaEEqCx Dez 2010\")        2.9506      0.323      9.145      0.000       2.317       3.584\n",
            "Q(\"Receita Dez 2010\")          -0.4041      0.027    -14.798      0.000      -0.458      -0.351\n",
            "Q(\"CxGerOp Dez 2010\")           3.1497      0.238     13.257      0.000       2.683       3.616\n",
            "Q(\"OuReAb Dez 2010\")            8.0864      0.631     12.815      0.000       6.848       9.325\n",
            "==============================================================================\n",
            "Omnibus:                      889.942   Durbin-Watson:                   0.824\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            96784.868\n",
            "Skew:                           3.575   Prob(JB):                         0.00\n",
            "Kurtosis:                      50.809   Cond. No.                     4.74e+08\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.74e+08. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1]\n",
        "\n",
        "# Definindo a fórmula do modelo Diff-in-Diff\n",
        "# A interação entre 'trat1' e 'tem1' captura o efeito do tratamento\n",
        "formula = 'Q(\"Valor Mercado30Jun11\") ~ tra3 + tem3 + tra3:tem3 + Q(\"Patrim Liq Dez 2010\") + Q(\"Lucro Liquido Dez 2010\") + Q(\"Intang Dez 2010\") + Q(\"CaixaEEqCx Dez 2010\") + Q(\"Receita Dez 2010\") + Q(\"CxGerOp Dez 2010\") + Q(\"OuReAb Dez 2010\")'\n",
        "\n",
        "# Estimando o modelo usando OLS\n",
        "modelo_diff_in_diff = smf.ols(formula=formula, data=df_filtrado).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão\n",
        "print(modelo_diff_in_diff.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_mif44D2mB4c",
        "outputId": "faab1394-3bcc-4634-edfc-e1435034daa6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                OLS Regression Results                               \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Jun11\")   R-squared:                       0.733\n",
            "Model:                                   OLS   Adj. R-squared:                  0.730\n",
            "Method:                        Least Squares   F-statistic:                     270.3\n",
            "Date:                       Tue, 06 Feb 2024   Prob (F-statistic):          3.22e-274\n",
            "Time:                               10:59:47   Log-Likelihood:                -17697.\n",
            "No. Observations:                        996   AIC:                         3.542e+04\n",
            "Df Residuals:                            985   BIC:                         3.547e+04\n",
            "Df Model:                                 10                                         \n",
            "Covariance Type:                   nonrobust                                         \n",
            "===============================================================================================\n",
            "                                  coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------\n",
            "Intercept                    6.963e+05   6.19e+05      1.125      0.261   -5.18e+05    1.91e+06\n",
            "tra3                          2.13e+07   4.55e+06      4.687      0.000    1.24e+07    3.02e+07\n",
            "tem3                        -1.803e+06   8.22e+05     -2.193      0.029   -3.42e+06    -1.9e+05\n",
            "tra3:tem3                    9.549e+06   5.62e+06      1.700      0.090   -1.48e+06    2.06e+07\n",
            "Q(\"Patrim Liq Dez 2010\")        1.6556      0.074     22.282      0.000       1.510       1.801\n",
            "Q(\"Lucro Liquido Dez 2010\")    -0.8813      0.256     -3.443      0.001      -1.384      -0.379\n",
            "Q(\"Intang Dez 2010\")           -0.3431      0.109     -3.155      0.002      -0.556      -0.130\n",
            "Q(\"CaixaEEqCx Dez 2010\")        2.8457      0.326      8.742      0.000       2.207       3.485\n",
            "Q(\"Receita Dez 2010\")          -0.3972      0.028    -14.417      0.000      -0.451      -0.343\n",
            "Q(\"CxGerOp Dez 2010\")           2.9730      0.240     12.404      0.000       2.503       3.443\n",
            "Q(\"OuReAb Dez 2010\")            7.4622      0.634     11.761      0.000       6.217       8.707\n",
            "==============================================================================\n",
            "Omnibus:                      748.945   Durbin-Watson:                   0.792\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            48305.094\n",
            "Skew:                           2.827   Prob(JB):                         0.00\n",
            "Kurtosis:                      36.645   Cond. No.                     4.74e+08\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.74e+08. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "OLS com a função robust"
      ],
      "metadata": {
        "id": "EmqUKhpKFdon"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1]\n",
        "\n",
        "# Definindo a fórmula do modelo Diff-in-Diff\n",
        "# A interação entre 'tra3' e 'tem3' captura o efeito do tratamento\n",
        "formula = 'Q(\"Valor Mercado30Jun11\") ~ tra3 + tem3 + tra3:tem3 + Q(\"Patrim Liq Dez 2010\") + Q(\"Lucro Liquido Dez 2010\") + Q(\"Intang Dez 2010\") + Q(\"CaixaEEqCx Dez 2010\") + Q(\"Receita Dez 2010\") + Q(\"CxGerOp Dez 2010\") + Q(\"OuReAb Dez 2010\")'\n",
        "\n",
        "# Estimando o modelo usando OLS com erros padrão robustos\n",
        "modelo_diff_in_diff = smf.ols(formula=formula, data=df_filtrado).fit(cov_type='HC0')\n",
        "\n",
        "# Exibindo os resultados da regressão\n",
        "print(modelo_diff_in_diff.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jyylt7blFdEq",
        "outputId": "b3b4b81e-7923-466f-8e4d-a92b506d2233"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                OLS Regression Results                               \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Jun11\")   R-squared:                       0.733\n",
            "Model:                                   OLS   Adj. R-squared:                  0.730\n",
            "Method:                        Least Squares   F-statistic:                     10.74\n",
            "Date:                       Tue, 06 Feb 2024   Prob (F-statistic):           4.55e-10\n",
            "Time:                               11:02:00   Log-Likelihood:                -17697.\n",
            "No. Observations:                        996   AIC:                         3.542e+04\n",
            "Df Residuals:                            985   BIC:                         3.547e+04\n",
            "Df Model:                                 10                                         \n",
            "Covariance Type:                         HC0                                         \n",
            "===============================================================================================\n",
            "                                  coef    std err          z      P>|z|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------\n",
            "Intercept                    6.963e+05   4.82e+05      1.444      0.149   -2.49e+05    1.64e+06\n",
            "tra3                          2.13e+07   9.23e+06      2.308      0.021    3.22e+06    3.94e+07\n",
            "tem3                        -1.803e+06   8.65e+05     -2.086      0.037    -3.5e+06   -1.09e+05\n",
            "tra3:tem3                    9.549e+06   1.28e+07      0.747      0.455   -1.55e+07    3.46e+07\n",
            "Q(\"Patrim Liq Dez 2010\")        1.6556      0.212      7.823      0.000       1.241       2.070\n",
            "Q(\"Lucro Liquido Dez 2010\")    -0.8813      0.576     -1.530      0.126      -2.010       0.247\n",
            "Q(\"Intang Dez 2010\")           -0.3431      0.314     -1.091      0.275      -0.959       0.273\n",
            "Q(\"CaixaEEqCx Dez 2010\")        2.8457      0.782      3.640      0.000       1.313       4.378\n",
            "Q(\"Receita Dez 2010\")          -0.3972      0.086     -4.605      0.000      -0.566      -0.228\n",
            "Q(\"CxGerOp Dez 2010\")           2.9730      0.752      3.952      0.000       1.499       4.447\n",
            "Q(\"OuReAb Dez 2010\")            7.4622      1.676      4.453      0.000       4.177      10.747\n",
            "==============================================================================\n",
            "Omnibus:                      748.945   Durbin-Watson:                   0.792\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            48305.094\n",
            "Skew:                           2.827   Prob(JB):                         0.00\n",
            "Kurtosis:                      36.645   Cond. No.                     4.74e+08\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors are heteroscedasticity robust (HC0)\n",
            "[2] The condition number is large, 4.74e+08. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:1896: ValueWarning: covariance of constraints does not have full rank. The number of constraints is 10, but rank is 5\n",
            "  warnings.warn('covariance of constraints does not have full '\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import ElasticNet\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import numpy as np\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado e criamos uma cópia para evitar o SettingWithCopyWarning\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Escalonando as variáveis pelo 'quant acoes', utilizando .loc para evitar warnings\n",
        "variaveis_para_escalonar = ['Patrim Liq Dez 2010', 'Lucro Liquido Dez 2010', 'Intang Dez 2010',\n",
        "                            'CaixaEEqCx Dez 2010', 'Receita Dez 2010', 'CxGerOp Dez 2010', 'OuReAb Dez 2010']\n",
        "\n",
        "for var in variaveis_para_escalonar:\n",
        "    df_filtrado.loc[:, f'{var}_esc'] = df_filtrado[var] / df_filtrado['quant acoes']\n",
        "\n",
        "# Criando explicitamente a variável de interação\n",
        "df_filtrado['tra3_tem3'] = df_filtrado['tra3'] * df_filtrado['tem3']\n",
        "\n",
        "# Preparando as variáveis independentes (X) e a variável dependente (y)\n",
        "X = df_filtrado[['tra3', 'tem3', 'tra3_tem3'] + [f'{var}_esc' for var in variaveis_para_escalonar]]\n",
        "y = df_filtrado['PU30Abr11']\n",
        "\n",
        "# Removendo linhas onde 'y' é NaN\n",
        "X = X[~y.isna()]  # Atualiza 'X' removendo linhas correspondentes a NaN em 'y'\n",
        "y = y.dropna()  # Remove valores NaN de 'y'\n",
        "\n",
        "# Imputando valores NaN nas variáveis independentes\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_imputed = imputer.fit_transform(X)\n",
        "\n",
        "# Dividindo os dados em conjuntos de treino e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Ajustando o modelo Elastic Net\n",
        "elastic_net = ElasticNet(alpha=1.0, l1_ratio=0.5)  # Esses parâmetros podem ser ajustados conforme necessário\n",
        "elastic_net.fit(X_train, y_train)\n",
        "\n",
        "# Previsões e avaliação do modelo\n",
        "y_pred = elastic_net.predict(X_test)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(f'MSE: {mse}')\n",
        "\n",
        "# Exibindo os coeficientes do modelo\n",
        "print(f'Coeficientes: {elastic_net.coef_}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xp4Wq1slMmX0",
        "outputId": "1f35d977-d695-4b18-ec97-8a199f456ac0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE: 814.7062177112467\n",
            "Coeficientes: [ 0.          0.44078233  0.         -0.0033176   0.05982578 -0.00332158\n",
            "  0.64258154 -0.04920127  0.03311835  0.10929528]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "from statsmodels.tools.tools import add_constant\n",
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Supondo que 'df_filtrado' seja seu DataFrame filtrado\n",
        "# e 'formula' a sua fórmula de regressão.\n",
        "\n",
        "# Ajustando o modelo usando OLS\n",
        "modelo = smf.ols(formula=formula, data=df_filtrado).fit()\n",
        "\n",
        "# Obtendo o DataFrame das variáveis explicativas com constante adicionada\n",
        "# Isso é necessário porque o VIF requer a presença de um intercepto no modelo\n",
        "X = modelo.model.data.orig_exog\n",
        "X = add_constant(X)\n",
        "\n",
        "# Calculando o VIF\n",
        "vif = pd.DataFrame()\n",
        "vif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
        "vif[\"features\"] = X.columns\n",
        "\n",
        "print(vif)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pSMdWPrvHHPH",
        "outputId": "41b6f663-4bac-4a96-c221-32a52cde5f00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    VIF Factor                     features\n",
            "0     2.375578                    Intercept\n",
            "1     2.892125                         tra3\n",
            "2     1.041114                         tem3\n",
            "3     2.905638                    tra3:tem3\n",
            "4     3.239877     Q(\"Patrim Liq Dez 2010\")\n",
            "5     2.225929  Q(\"Lucro Liquido Dez 2010\")\n",
            "6     1.516310         Q(\"Intang Dez 2010\")\n",
            "7     3.187495     Q(\"CaixaEEqCx Dez 2010\")\n",
            "8     3.039093        Q(\"Receita Dez 2010\")\n",
            "9     5.202558        Q(\"CxGerOp Dez 2010\")\n",
            "10    1.239668         Q(\"OuReAb Dez 2010\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Selecionando apenas as variáveis independentes de interesse\n",
        "variables = df_filtrado[['Patrim Liq Dez 2010_esc', 'Lucro Liquido Dez 2010_esc', 'Intang Dez 2010_esc', 'CaixaEEqCx Dez 2010_esc', 'Receita Dez 2010_esc', 'OuReAb Dez 2010_esc']]\n",
        "\n",
        "# Calculando a matriz de correlação\n",
        "correlation_matrix = variables.corr()\n",
        "\n",
        "# Exibindo a matriz de correlação\n",
        "correlation_matrix\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "Pp2ZT3M4IQ2Y",
        "outputId": "0495c7d7-3089-4c3c-dd1b-15c7583d8f31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                            Patrim Liq Dez 2010_esc  \\\n",
              "Patrim Liq Dez 2010_esc                    1.000000   \n",
              "Lucro Liquido Dez 2010_esc                 0.672691   \n",
              "Intang Dez 2010_esc                       -0.144505   \n",
              "CaixaEEqCx Dez 2010_esc                   -0.866069   \n",
              "Receita Dez 2010_esc                      -0.559115   \n",
              "OuReAb Dez 2010_esc                        0.007853   \n",
              "\n",
              "                            Lucro Liquido Dez 2010_esc  Intang Dez 2010_esc  \\\n",
              "Patrim Liq Dez 2010_esc                       0.672691            -0.144505   \n",
              "Lucro Liquido Dez 2010_esc                    1.000000            -0.132154   \n",
              "Intang Dez 2010_esc                          -0.132154             1.000000   \n",
              "CaixaEEqCx Dez 2010_esc                      -0.516862             0.488301   \n",
              "Receita Dez 2010_esc                         -0.318245             0.851850   \n",
              "OuReAb Dez 2010_esc                          -0.022650             0.271797   \n",
              "\n",
              "                            CaixaEEqCx Dez 2010_esc  Receita Dez 2010_esc  \\\n",
              "Patrim Liq Dez 2010_esc                   -0.866069             -0.559115   \n",
              "Lucro Liquido Dez 2010_esc                -0.516862             -0.318245   \n",
              "Intang Dez 2010_esc                        0.488301              0.851850   \n",
              "CaixaEEqCx Dez 2010_esc                    1.000000              0.819308   \n",
              "Receita Dez 2010_esc                       0.819308              1.000000   \n",
              "OuReAb Dez 2010_esc                        0.035744              0.198055   \n",
              "\n",
              "                            OuReAb Dez 2010_esc  \n",
              "Patrim Liq Dez 2010_esc                0.007853  \n",
              "Lucro Liquido Dez 2010_esc            -0.022650  \n",
              "Intang Dez 2010_esc                    0.271797  \n",
              "CaixaEEqCx Dez 2010_esc                0.035744  \n",
              "Receita Dez 2010_esc                   0.198055  \n",
              "OuReAb Dez 2010_esc                    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-085e32fe-3958-42ca-9cc6-dfe77d63ab94\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Patrim Liq Dez 2010_esc</th>\n",
              "      <th>Lucro Liquido Dez 2010_esc</th>\n",
              "      <th>Intang Dez 2010_esc</th>\n",
              "      <th>CaixaEEqCx Dez 2010_esc</th>\n",
              "      <th>Receita Dez 2010_esc</th>\n",
              "      <th>OuReAb Dez 2010_esc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Patrim Liq Dez 2010_esc</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.672691</td>\n",
              "      <td>-0.144505</td>\n",
              "      <td>-0.866069</td>\n",
              "      <td>-0.559115</td>\n",
              "      <td>0.007853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lucro Liquido Dez 2010_esc</th>\n",
              "      <td>0.672691</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.132154</td>\n",
              "      <td>-0.516862</td>\n",
              "      <td>-0.318245</td>\n",
              "      <td>-0.022650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Intang Dez 2010_esc</th>\n",
              "      <td>-0.144505</td>\n",
              "      <td>-0.132154</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.488301</td>\n",
              "      <td>0.851850</td>\n",
              "      <td>0.271797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CaixaEEqCx Dez 2010_esc</th>\n",
              "      <td>-0.866069</td>\n",
              "      <td>-0.516862</td>\n",
              "      <td>0.488301</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.819308</td>\n",
              "      <td>0.035744</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Receita Dez 2010_esc</th>\n",
              "      <td>-0.559115</td>\n",
              "      <td>-0.318245</td>\n",
              "      <td>0.851850</td>\n",
              "      <td>0.819308</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.198055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>OuReAb Dez 2010_esc</th>\n",
              "      <td>0.007853</td>\n",
              "      <td>-0.022650</td>\n",
              "      <td>0.271797</td>\n",
              "      <td>0.035744</td>\n",
              "      <td>0.198055</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-085e32fe-3958-42ca-9cc6-dfe77d63ab94')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-085e32fe-3958-42ca-9cc6-dfe77d63ab94 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-085e32fe-3958-42ca-9cc6-dfe77d63ab94');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3739ea1b-d947-4702-a945-7e69a3267fd0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3739ea1b-d947-4702-a945-7e69a3267fd0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3739ea1b-d947-4702-a945-7e69a3267fd0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_405e3b55-a6a2-4221-ad3d-df9b58a35e6c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('correlation_matrix')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_405e3b55-a6a2-4221-ad3d-df9b58a35e6c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('correlation_matrix');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado e criamos uma cópia para evitar o SettingWithCopyWarning\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Escalonando as variáveis pelo 'ativo total t-1', utilizando .loc para evitar warnings\n",
        "variaveis_para_escalonar = ['Patrim Liq Dez 2010', 'Lucro Liquido Dez 2010', 'Intang Dez 2010',\n",
        "                            'CaixaEEqCx Dez 2010', 'Receita Dez 2010', 'CxGerOp Dez 2010', 'OuReAb Dez 2010']\n",
        "\n",
        "for var in variaveis_para_escalonar:\n",
        "    df_filtrado.loc[:, f'{var}_esc'] = df_filtrado[var] / df_filtrado['quant acoes']\n",
        "\n",
        "# Atualizando a fórmula do modelo para incluir as variáveis escalonadas\n",
        "formula_escalonada = 'Q(\"PU30Mai11\") ~ tra3 + tem3 + tra3:tem3 + \\\n",
        "Q(\"Patrim Liq Dez 2010_esc\") + Q(\"Lucro Liquido Dez 2010_esc\") + Q(\"Intang Dez 2010_esc\") + \\\n",
        "Q(\"CaixaEEqCx Dez 2010_esc\") + Q(\"Receita Dez 2010_esc\") + Q(\"CxGerOp Dez 2010_esc\") + \\\n",
        "Q(\"OuReAb Dez 2010_esc\")'\n",
        "\n",
        "# Estimando o modelo usando OLS com as variáveis escalonadas\n",
        "modelo_diff_in_diff_escalonado = smf.ols(formula=formula_escalonada, data=df_filtrado).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão escalonada\n",
        "print(modelo_diff_in_diff_escalonado.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7hgdk-AmmWps",
        "outputId": "ea24bbb4-fb5b-43d8-e9d9-ea58bc618ce5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:         Q(\"PU30Mai11\")   R-squared:                       0.882\n",
            "Model:                            OLS   Adj. R-squared:                  0.880\n",
            "Method:                 Least Squares   F-statistic:                     706.1\n",
            "Date:                Mon, 05 Feb 2024   Prob (F-statistic):               0.00\n",
            "Time:                        23:25:59   Log-Likelihood:                -4198.9\n",
            "No. Observations:                 959   AIC:                             8420.\n",
            "Df Residuals:                     948   BIC:                             8473.\n",
            "Df Model:                          10                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "===================================================================================================\n",
            "                                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "Intercept                          12.6498      0.959     13.195      0.000      10.768      14.531\n",
            "tra3                               -3.8426      6.926     -0.555      0.579     -17.434       9.749\n",
            "tem3                                6.6107      1.285      5.146      0.000       4.090       9.132\n",
            "tra3:tem3                           3.6124      8.589      0.421      0.674     -13.244      20.469\n",
            "Q(\"Patrim Liq Dez 2010_esc\")       -0.0077      0.001    -13.949      0.000      -0.009      -0.007\n",
            "Q(\"Lucro Liquido Dez 2010_esc\")     0.0458      0.002     19.756      0.000       0.041       0.050\n",
            "Q(\"Intang Dez 2010_esc\")            0.2124      0.021     10.249      0.000       0.172       0.253\n",
            "Q(\"CaixaEEqCx Dez 2010_esc\")        0.4734      0.017     27.675      0.000       0.440       0.507\n",
            "Q(\"Receita Dez 2010_esc\")          -0.0905      0.005    -17.662      0.000      -0.101      -0.080\n",
            "Q(\"CxGerOp Dez 2010_esc\")           0.0101      0.007      1.429      0.153      -0.004       0.024\n",
            "Q(\"OuReAb Dez 2010_esc\")            0.0847      0.031      2.751      0.006       0.024       0.145\n",
            "==============================================================================\n",
            "Omnibus:                      468.942   Durbin-Watson:                   0.926\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             5889.353\n",
            "Skew:                           1.913   Prob(JB):                         0.00\n",
            "Kurtosis:                      14.522   Cond. No.                     6.96e+04\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 6.96e+04. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado e criamos uma cópia para evitar o SettingWithCopyWarning\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Escalonando as variáveis pelo 'ativo total t-1', utilizando .loc para evitar warnings\n",
        "variaveis_para_escalonar = ['Patrim Liq Dez 2010', 'Lucro Liquido Dez 2010', 'Intang Dez 2010',\n",
        "                            'CaixaEEqCx Dez 2010', 'Receita Dez 2010', 'CxGerOp Dez 2010', 'OuReAb Dez 2010']\n",
        "\n",
        "for var in variaveis_para_escalonar:\n",
        "    df_filtrado.loc[:, f'{var}_esc'] = df_filtrado[var] / df_filtrado['quant acoes']\n",
        "\n",
        "# Atualizando a fórmula do modelo para incluir as variáveis escalonadas\n",
        "formula_escalonada = 'Q(\"PU30Jun11\") ~ tra3 + tem3 + tra3:tem3 + \\\n",
        "Q(\"Patrim Liq Dez 2010_esc\") + Q(\"Lucro Liquido Dez 2010_esc\") + Q(\"Intang Dez 2010_esc\") + \\\n",
        "Q(\"CaixaEEqCx Dez 2010_esc\") + Q(\"Receita Dez 2010_esc\") + Q(\"CxGerOp Dez 2010_esc\") + \\\n",
        "Q(\"OuReAb Dez 2010_esc\")'\n",
        "\n",
        "# Estimando o modelo usando OLS com as variáveis escalonadas\n",
        "modelo_diff_in_diff_escalonado = smf.ols(formula=formula_escalonada, data=df_filtrado).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão escalonada\n",
        "print(modelo_diff_in_diff_escalonado.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hn70i1X3mbvV",
        "outputId": "99e152ed-797a-401e-a449-2aaae3f83ca6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:         Q(\"PU30Jun11\")   R-squared:                       0.853\n",
            "Model:                            OLS   Adj. R-squared:                  0.851\n",
            "Method:                 Least Squares   F-statistic:                     545.8\n",
            "Date:                Mon, 05 Feb 2024   Prob (F-statistic):               0.00\n",
            "Time:                        23:26:32   Log-Likelihood:                -4241.2\n",
            "No. Observations:                 955   AIC:                             8504.\n",
            "Df Residuals:                     944   BIC:                             8558.\n",
            "Df Model:                          10                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "===================================================================================================\n",
            "                                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "Intercept                          13.6019      1.020     13.341      0.000      11.601      15.603\n",
            "tra3                               -4.2986      7.374     -0.583      0.560     -18.769      10.172\n",
            "tem3                                5.7398      1.370      4.190      0.000       3.052       8.428\n",
            "tra3:tem3                           3.9290      9.145      0.430      0.668     -14.018      21.876\n",
            "Q(\"Patrim Liq Dez 2010_esc\")       -0.0064      0.001    -10.895      0.000      -0.008      -0.005\n",
            "Q(\"Lucro Liquido Dez 2010_esc\")     0.0223      0.002      9.034      0.000       0.017       0.027\n",
            "Q(\"Intang Dez 2010_esc\")            0.1842      0.022      8.322      0.000       0.141       0.228\n",
            "Q(\"CaixaEEqCx Dez 2010_esc\")        0.4677      0.018     25.780      0.000       0.432       0.503\n",
            "Q(\"Receita Dez 2010_esc\")          -0.0890      0.005    -16.259      0.000      -0.100      -0.078\n",
            "Q(\"CxGerOp Dez 2010_esc\")           0.0266      0.007      3.556      0.000       0.012       0.041\n",
            "Q(\"OuReAb Dez 2010_esc\")            0.1026      0.033      3.078      0.002       0.037       0.168\n",
            "==============================================================================\n",
            "Omnibus:                      503.048   Durbin-Watson:                   0.958\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             7003.871\n",
            "Skew:                           2.075   Prob(JB):                         0.00\n",
            "Kurtosis:                      15.601   Cond. No.                     6.95e+04\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 6.95e+04. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "from patsy import dmatrices\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1]\n",
        "\n",
        "# Definindo a fórmula do modelo Diff-in-Diff\n",
        "formula = 'Q(\"Valor Mercado30Jun11\") ~ tra3 + tem3 + tra3:tem3 + Q(\"Patrim Liq Dez 2010\") + Q(\"Lucro Liquido Dez 2010\") + Q(\"Intang Dez 2010\") + Q(\"CaixaEEqCx Dez 2010\") + Q(\"Receita Dez 2010\") + Q(\"CxGerOp Dez 2010\") + Q(\"OuReAb Dez 2010\")'\n",
        "\n",
        "# Preparando os dados para a regressão robusta\n",
        "y, X = dmatrices(formula, data=df_filtrado, return_type='dataframe')\n",
        "\n",
        "# Estimando o modelo usando RLM com a norma de Huber\n",
        "modelo_diff_in_diff_robusto = sm.RLM(y, X, M=sm.robust.norms.HuberT()).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão robusta\n",
        "print(modelo_diff_in_diff_robusto.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sQkqrVk7nm6i",
        "outputId": "f96d5f0f-cd9b-4d1f-bd19-aeb300ad5701"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                        Robust linear Model Regression Results                       \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Jun11\")   No. Observations:                  996\n",
            "Model:                                   RLM   Df Residuals:                      985\n",
            "Method:                                 IRLS   Df Model:                           10\n",
            "Norm:                                 HuberT                                         \n",
            "Scale Est.:                              mad                                         \n",
            "Cov Type:                                 H1                                         \n",
            "Date:                       Mon, 05 Feb 2024                                         \n",
            "Time:                               23:46:11                                         \n",
            "No. Iterations:                            2                                         \n",
            "===============================================================================================\n",
            "                                  coef    std err          z      P>|z|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------\n",
            "Intercept                    2.526e+05   1.13e+05      2.241      0.025    3.17e+04    4.74e+05\n",
            "tra3                         1.982e+07   8.28e+05     23.932      0.000    1.82e+07    2.14e+07\n",
            "tem3                        -3.994e+05    1.5e+05     -2.666      0.008   -6.93e+05   -1.06e+05\n",
            "tra3:tem3                    4.933e+06   1.02e+06      4.818      0.000    2.93e+06    6.94e+06\n",
            "Q(\"Patrim Liq Dez 2010\")        1.3808      0.014    101.984      0.000       1.354       1.407\n",
            "Q(\"Lucro Liquido Dez 2010\")    -0.6264      0.047    -13.430      0.000      -0.718      -0.535\n",
            "Q(\"Intang Dez 2010\")           -0.1124      0.020     -5.673      0.000      -0.151      -0.074\n",
            "Q(\"CaixaEEqCx Dez 2010\")        2.1783      0.059     36.722      0.000       2.062       2.295\n",
            "Q(\"Receita Dez 2010\")          -0.3468      0.005    -69.093      0.000      -0.357      -0.337\n",
            "Q(\"CxGerOp Dez 2010\")           2.8552      0.044     65.371      0.000       2.770       2.941\n",
            "Q(\"OuReAb Dez 2010\")            5.3437      0.116     46.219      0.000       5.117       5.570\n",
            "===============================================================================================\n",
            "\n",
            "If the model instance has been used for another fit with different fit parameters, then the fit options might not be the correct ones anymore .\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "from patsy import dmatrices\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Adicionando colunas escalonadas ao DataFrame\n",
        "variaveis = [\n",
        "    'Valor Mercado30Jun11', 'Patrim Liq Dez 2010', 'Lucro Liquido Dez 2010', 'Intang Dez 2010',\n",
        "    'CaixaEEqCx Dez 2010', 'Receita Dez 2010', 'CxGerOp Dez 2010', 'OuReAb Dez 2010'\n",
        "]\n",
        "\n",
        "for var in variaveis:\n",
        "    df_filtrado[f'{var}_esc'] = df_filtrado[var] / df_filtrado['ativo total t-1']\n",
        "\n",
        "# Atualizando a fórmula do modelo para usar as variáveis escalonadas\n",
        "formula_escalonada = 'Q(\"Valor Mercado30Jun11\") ~ tra3 + tem3 + tra3:tem3 + ' + \\\n",
        "    ' + '.join([f'Q(\"{var}_esc\")' for var in variaveis])\n",
        "\n",
        "# Preparando os dados para a regressão robusta\n",
        "y, X = dmatrices(formula_escalonada, data=df_filtrado, return_type='dataframe')\n",
        "\n",
        "# Estimando o modelo usando RLM com a norma de Huber\n",
        "modelo_diff_in_diff_robusto = sm.RLM(y, X, M=sm.robust.norms.HuberT()).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão robusta\n",
        "print(modelo_diff_in_diff_robusto.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TCea75k_sUMg",
        "outputId": "a06608b3-99ac-4e14-e94f-be940487f2d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                        Robust linear Model Regression Results                       \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Jun11\")   No. Observations:                  996\n",
            "Model:                                   RLM   Df Residuals:                      984\n",
            "Method:                                 IRLS   Df Model:                           11\n",
            "Norm:                                 HuberT                                         \n",
            "Scale Est.:                              mad                                         \n",
            "Cov Type:                                 H1                                         \n",
            "Date:                       Mon, 05 Feb 2024                                         \n",
            "Time:                               23:51:39                                         \n",
            "No. Iterations:                            2                                         \n",
            "===================================================================================================\n",
            "                                      coef    std err          z      P>|z|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "Intercept                        3.569e+06   3.67e+05      9.722      0.000    2.85e+06    4.29e+06\n",
            "tra3                             1.531e+07   2.07e+06      7.388      0.000    1.13e+07    1.94e+07\n",
            "tem3                             8.035e+05   3.74e+05      2.147      0.032    7.01e+04    1.54e+06\n",
            "tra3:tem3                       -5.863e+06   2.57e+06     -2.285      0.022   -1.09e+07   -8.34e+05\n",
            "Q(\"Valor Mercado30Jun11_esc\")    3.564e+05   7.57e+04      4.709      0.000    2.08e+05    5.05e+05\n",
            "Q(\"Patrim Liq Dez 2010_esc\")     1.924e+05   5.14e+04      3.744      0.000    9.17e+04    2.93e+05\n",
            "Q(\"Lucro Liquido Dez 2010_esc\") -1.513e+05   2.15e+05     -0.705      0.481   -5.72e+05     2.7e+05\n",
            "Q(\"Intang Dez 2010_esc\")         7.494e+06   9.36e+05      8.003      0.000    5.66e+06    9.33e+06\n",
            "Q(\"CaixaEEqCx Dez 2010_esc\")    -7.229e+06   1.16e+06     -6.232      0.000    -9.5e+06   -4.96e+06\n",
            "Q(\"Receita Dez 2010_esc\")       -8.455e+05   3.37e+05     -2.508      0.012   -1.51e+06   -1.85e+05\n",
            "Q(\"CxGerOp Dez 2010_esc\")        8.261e+06   1.18e+06      6.979      0.000    5.94e+06    1.06e+07\n",
            "Q(\"OuReAb Dez 2010_esc\")         2.694e+06   5.18e+06      0.520      0.603   -7.46e+06    1.28e+07\n",
            "===================================================================================================\n",
            "\n",
            "If the model instance has been used for another fit with different fit parameters, then the fit options might not be the correct ones anymore .\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "from patsy import dmatrices\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Adicionando colunas escalonadas ao DataFrame\n",
        "variaveis = [\n",
        "    'Patrim Liq Dez 2010', 'Lucro Liquido Dez 2010', 'Intang Dez 2010',\n",
        "    'CaixaEEqCx Dez 2010', 'Receita Dez 2010', 'CxGerOp Dez 2010', 'OuReAb Dez 2010'\n",
        "]\n",
        "\n",
        "for var in variaveis:\n",
        "    df_filtrado[f'{var}_esc'] = df_filtrado[var] / df_filtrado['quant acoes']\n",
        "\n",
        "# Atualizando a fórmula do modelo para usar as variáveis escalonadas\n",
        "formula_escalonada = 'Q(\"PU30Jun11\") ~ tra3 + tem3 + tra3:tem3 + ' + \\\n",
        "    ' + '.join([f'Q(\"{var}_esc\")' for var in variaveis])\n",
        "\n",
        "# Preparando os dados para a regressão robusta\n",
        "y, X = dmatrices(formula_escalonada, data=df_filtrado, return_type='dataframe')\n",
        "\n",
        "# Estimando o modelo usando RLM com a norma de Huber\n",
        "modelo_diff_in_diff_robusto = sm.RLM(y, X, M=sm.robust.norms.HuberT()).fit()\n",
        "\n",
        "# Exibindo os resultados da regressão robusta\n",
        "print(modelo_diff_in_diff_robusto.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lbzoGMrMsnr9",
        "outputId": "a3a0c450-a038-456b-c7c0-1495e955c8bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                    Robust linear Model Regression Results                    \n",
            "==============================================================================\n",
            "Dep. Variable:         Q(\"PU30Jun11\")   No. Observations:                  955\n",
            "Model:                            RLM   Df Residuals:                      944\n",
            "Method:                          IRLS   Df Model:                           10\n",
            "Norm:                          HuberT                                         \n",
            "Scale Est.:                       mad                                         \n",
            "Cov Type:                          H1                                         \n",
            "Date:                Mon, 05 Feb 2024                                         \n",
            "Time:                        23:53:25                                         \n",
            "No. Iterations:                    50                                         \n",
            "===================================================================================================\n",
            "                                      coef    std err          z      P>|z|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "Intercept                          11.3415      0.556     20.411      0.000      10.252      12.431\n",
            "tra3                               -2.3973      4.018     -0.597      0.551     -10.273       5.479\n",
            "tem3                                3.4874      0.746      4.672      0.000       2.024       4.951\n",
            "tra3:tem3                           4.7133      4.984      0.946      0.344      -5.055      14.481\n",
            "Q(\"Patrim Liq Dez 2010_esc\")       -0.0057      0.000    -17.979      0.000      -0.006      -0.005\n",
            "Q(\"Lucro Liquido Dez 2010_esc\")     0.0250      0.001     18.593      0.000       0.022       0.028\n",
            "Q(\"Intang Dez 2010_esc\")            0.0651      0.012      5.399      0.000       0.041       0.089\n",
            "Q(\"CaixaEEqCx Dez 2010_esc\")        0.4467      0.010     45.178      0.000       0.427       0.466\n",
            "Q(\"Receita Dez 2010_esc\")          -0.0556      0.003    -18.631      0.000      -0.061      -0.050\n",
            "Q(\"CxGerOp Dez 2010_esc\")           0.0444      0.004     10.897      0.000       0.036       0.052\n",
            "Q(\"OuReAb Dez 2010_esc\")            0.1071      0.018      5.897      0.000       0.072       0.143\n",
            "===================================================================================================\n",
            "\n",
            "If the model instance has been used for another fit with different fit parameters, then the fit options might not be the correct ones anymore .\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Definindo a fórmula do modelo Diff-in-Diff\n",
        "formula = 'Q(\"Valor Mercado30Jun11\") ~ tra3 + tem3 + tra3:tem3 + Q(\"Patrim Liq Dez 2010\") + Q(\"Lucro Liquido Dez 2010\") + Q(\"Intang Dez 2010\") + Q(\"CaixaEEqCx Dez 2010\") + Q(\"Receita Dez 2010\") + Q(\"CxGerOp Dez 2010\") + Q(\"OuReAb Dez 2010\")'\n",
        "\n",
        "# Estimando o modelo usando regressão quantílica na mediana\n",
        "modelo_diff_in_diff_quantilica = smf.quantreg(formula, df_filtrado).fit(q=0.5)\n",
        "\n",
        "# Exibindo os resultados da regressão quantílica\n",
        "print(modelo_diff_in_diff_quantilica.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6rHuP5oktigt",
        "outputId": "f383a93d-103c-4ccd-b3b0-9c53d1c26cb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                             QuantReg Regression Results                             \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Jun11\")   Pseudo R-squared:               0.4558\n",
            "Model:                              QuantReg   Bandwidth:                   5.991e+05\n",
            "Method:                        Least Squares   Sparsity:                    2.137e+06\n",
            "Date:                       Mon, 05 Feb 2024   No. Observations:                  996\n",
            "Time:                               23:56:25   Df Residuals:                      985\n",
            "                                               Df Model:                           10\n",
            "===============================================================================================\n",
            "                                  coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------\n",
            "Intercept                   -2.979e-06   2.69e+04  -1.11e-10      1.000   -5.28e+04    5.28e+04\n",
            "tra3                        -2.011e-11    591.876   -3.4e-14      1.000   -1161.483    1161.483\n",
            "tem3                         2.177e-07   1.79e+04   1.21e-11      1.000   -3.52e+04    3.52e+04\n",
            "tra3:tem3                   -7.126e-11    444.232   -1.6e-13      1.000    -871.750     871.750\n",
            "Q(\"Patrim Liq Dez 2010\")        0.7364      0.006    119.420      0.000       0.724       0.749\n",
            "Q(\"Lucro Liquido Dez 2010\")    -0.4309      0.022    -19.991      0.000      -0.473      -0.389\n",
            "Q(\"Intang Dez 2010\")            0.3543      0.009     38.670      0.000       0.336       0.372\n",
            "Q(\"CaixaEEqCx Dez 2010\")        1.4709      0.027     53.858      0.000       1.417       1.524\n",
            "Q(\"Receita Dez 2010\")          -0.2186      0.002    -94.236      0.000      -0.223      -0.214\n",
            "Q(\"CxGerOp Dez 2010\")           2.3880      0.020    118.233      0.000       2.348       2.428\n",
            "Q(\"OuReAb Dez 2010\")            1.6180      0.053     30.513      0.000       1.514       1.722\n",
            "===============================================================================================\n",
            "\n",
            "The smallest eigenvalue is   -186. This might indicate that there are\n",
            "strong multicollinearity problems or that the design matrix is singular.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/regression/linear_model.py:1966: RuntimeWarning: invalid value encountered in sqrt\n",
            "  return np.sqrt(eigvals[0]/eigvals[-1])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "from patsy import dmatrices\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Adicionando colunas escalonadas ao DataFrame\n",
        "variaveis = [\n",
        "    'Valor Mercado30Jun11', 'Patrim Liq Dez 2010', 'Lucro Liquido Dez 2010', 'Intang Dez 2010',\n",
        "    'CaixaEEqCx Dez 2010', 'Receita Dez 2010', 'CxGerOp Dez 2010', 'OuReAb Dez 2010'\n",
        "]\n",
        "\n",
        "# Certifique-se de que 'quant acoes' é a variável correta para escalar as outras variáveis\n",
        "for var in variaveis:\n",
        "    df_filtrado[f'{var}_esc'] = df_filtrado[var] / df_filtrado['ativo total t-1']\n",
        "\n",
        "# Atualizando a fórmula do modelo para usar as variáveis escalonadas\n",
        "formula_escalonada = 'Q(\"Valor Mercado30Jun11\") ~ tra3 + tem3 + tra3:tem3 + ' + \\\n",
        "    ' + '.join([f'Q(\"{var}_esc\")' for var in variaveis])\n",
        "\n",
        "# Estimando o modelo usando regressão quantílica na mediana\n",
        "modelo_diff_in_diff_quantilica = smf.quantreg(formula_escalonada, df_filtrado).fit(q=0.5)\n",
        "\n",
        "# Exibindo os resultados da regressão quantílica\n",
        "print(modelo_diff_in_diff_quantilica.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rpUeAf0DujlF",
        "outputId": "24f63913-9955-43ab-f466-bdc184aa5cbd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                             QuantReg Regression Results                             \n",
            "=====================================================================================\n",
            "Dep. Variable:     Q(\"Valor Mercado30Jun11\")   Pseudo R-squared:              0.04365\n",
            "Model:                              QuantReg   Bandwidth:                   1.862e+06\n",
            "Method:                        Least Squares   Sparsity:                    5.447e+06\n",
            "Date:                       Tue, 06 Feb 2024   No. Observations:                  996\n",
            "Time:                               00:01:43   Df Residuals:                      984\n",
            "                                               Df Model:                           11\n",
            "===================================================================================================\n",
            "                                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "Intercept                        8.239e+05   1.73e+05      4.774      0.000    4.85e+05    1.16e+06\n",
            "tra3                             6.585e+06   9.74e+05      6.758      0.000    4.67e+06     8.5e+06\n",
            "tem3                             2.331e+05   1.76e+05      1.325      0.185   -1.12e+05    5.78e+05\n",
            "tra3:tem3                       -3.098e+06   1.21e+06     -2.569      0.010   -5.46e+06   -7.31e+05\n",
            "Q(\"Valor Mercado30Jun11_esc\")    2.871e+05   3.56e+04      8.072      0.000    2.17e+05    3.57e+05\n",
            "Q(\"Patrim Liq Dez 2010_esc\")       5.8e+04   2.42e+04      2.401      0.017    1.06e+04    1.05e+05\n",
            "Q(\"Lucro Liquido Dez 2010_esc\") -3.574e+04   1.01e+05     -0.354      0.723   -2.34e+05    1.62e+05\n",
            "Q(\"Intang Dez 2010_esc\")          6.83e+06    4.4e+05     15.519      0.000    5.97e+06    7.69e+06\n",
            "Q(\"CaixaEEqCx Dez 2010_esc\")    -2.085e+06   5.45e+05     -3.824      0.000   -3.15e+06   -1.01e+06\n",
            "Q(\"Receita Dez 2010_esc\")        -6.26e+05   1.58e+05     -3.951      0.000   -9.37e+05   -3.15e+05\n",
            "Q(\"CxGerOp Dez 2010_esc\")        6.293e+06   5.56e+05     11.312      0.000     5.2e+06    7.39e+06\n",
            "Q(\"OuReAb Dez 2010_esc\")         1.674e+06   2.43e+06      0.688      0.492    -3.1e+06    6.45e+06\n",
            "===================================================================================================\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/regression/quantile_regression.py:191: IterationLimitWarning: Maximum number of iterations (1000) reached.\n",
            "  warnings.warn(\"Maximum number of iterations (\" + str(max_iter) +\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "from patsy import dmatrices\n",
        "\n",
        "# Supondo que 'df' seja o seu DataFrame após ler o arquivo Excel\n",
        "# Primeiro, filtramos as linhas conforme especificado\n",
        "df_filtrado = df[df['modelo3'] == 1].copy()\n",
        "\n",
        "# Adicionando colunas escalonadas ao DataFrame\n",
        "variaveis = [\n",
        "    'Patrim Liq Dez 2010', 'Lucro Liquido Dez 2010', 'Intang Dez 2010',\n",
        "    'CaixaEEqCx Dez 2010', 'Receita Dez 2010', 'CxGerOp Dez 2010', 'OuReAb Dez 2010'\n",
        "]\n",
        "\n",
        "# Certifique-se de que 'quant acoes' é a variável correta para escalar as outras variáveis\n",
        "for var in variaveis:\n",
        "    df_filtrado[f'{var}_esc'] = df_filtrado[var] / df_filtrado['quant acoes']\n",
        "\n",
        "# Atualizando a fórmula do modelo para usar as variáveis escalonadas\n",
        "formula_escalonada = 'Q(\"PU30Jun11\") ~ tra3 + tem3 + tra3:tem3 + ' + \\\n",
        "    ' + '.join([f'Q(\"{var}_esc\")' for var in variaveis])\n",
        "\n",
        "# Estimando o modelo usando regressão quantílica na mediana\n",
        "modelo_diff_in_diff_quantilica = smf.quantreg(formula_escalonada, df_filtrado).fit(q=0.5)\n",
        "\n",
        "# Exibindo os resultados da regressão quantílica\n",
        "print(modelo_diff_in_diff_quantilica.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V7pZr4JPuaMB",
        "outputId": "338128ff-99b9-47dc-8978-ff30d0458f23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                         QuantReg Regression Results                          \n",
            "==============================================================================\n",
            "Dep. Variable:         Q(\"PU30Jun11\")   Pseudo R-squared:               0.2359\n",
            "Model:                       QuantReg   Bandwidth:                       5.379\n",
            "Method:                 Least Squares   Sparsity:                        24.75\n",
            "Date:                Tue, 06 Feb 2024   No. Observations:                  955\n",
            "Time:                        00:00:12   Df Residuals:                      944\n",
            "                                        Df Model:                           10\n",
            "===================================================================================================\n",
            "                                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "Intercept                           8.5590      0.611     14.012      0.000       7.360       9.758\n",
            "tra3                               -0.5200      4.417     -0.118      0.906      -9.189       8.149\n",
            "tem3                                3.2889      0.821      4.008      0.000       1.679       4.899\n",
            "tra3:tem3                          -0.5182      5.479     -0.095      0.925     -11.270      10.233\n",
            "Q(\"Patrim Liq Dez 2010_esc\")       -0.0054      0.000    -15.316      0.000      -0.006      -0.005\n",
            "Q(\"Lucro Liquido Dez 2010_esc\")     0.0269      0.001     18.183      0.000       0.024       0.030\n",
            "Q(\"Intang Dez 2010_esc\")            0.0609      0.013      4.594      0.000       0.035       0.087\n",
            "Q(\"CaixaEEqCx Dez 2010_esc\")        0.4416      0.011     40.632      0.000       0.420       0.463\n",
            "Q(\"Receita Dez 2010_esc\")          -0.0355      0.003    -10.837      0.000      -0.042      -0.029\n",
            "Q(\"CxGerOp Dez 2010_esc\")           0.0649      0.004     14.466      0.000       0.056       0.074\n",
            "Q(\"OuReAb Dez 2010_esc\")           -0.0354      0.020     -1.773      0.076      -0.075       0.004\n",
            "===================================================================================================\n",
            "\n",
            "The condition number is large, 6.95e+04. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    }
  ]
}